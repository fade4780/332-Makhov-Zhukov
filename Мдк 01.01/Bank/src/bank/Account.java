package bank;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Random;

public abstract class Account {
    private String fullName;
    private String accountNumber;
    protected BigDecimal balance;
    private boolean bonusGiven = false; // –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å

    public Account(String fullName, BigDecimal initialDeposit) {
        if (fullName == null || fullName.isBlank())
            throw new IllegalArgumentException("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
        if (initialDeposit.compareTo(BigDecimal.ZERO) < 0)
            throw new IllegalArgumentException("–ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!");

        this.fullName = fullName;
        this.accountNumber = generateAccountNumber();
        this.balance = initialDeposit.setScale(2, RoundingMode.HALF_UP);
    }

    private String generateAccountNumber() {
        Random rnd = new Random();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 20; i++) {
            sb.append(rnd.nextInt(10));
        }
        return sb.toString();
    }

    public String getFullName() { return fullName; }
    public String getAccountNumber() { return accountNumber; }
    public BigDecimal getBalance() { return balance; }

    // –í—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞
    public void printBalance() {
        System.out.printf("üí≥ %s (‚Ññ%s): %.2f ‚ÇΩ%n", fullName, accountNumber, balance);
    }

    // –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—á—ë—Ç
    public void transferTo(Account other, BigDecimal amount) {
        if (other == null) throw new IllegalArgumentException("–¶–µ–ª–µ–≤–æ–π —Å—á—ë—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null!");
        if (amount.compareTo(BigDecimal.ZERO) <= 0)
            throw new IllegalArgumentException("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!");
        if (balance.compareTo(amount) < 0)
            throw new IllegalArgumentException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!");

        balance = balance.subtract(amount);
        other.balance = other.balance.add(amount);
        System.out.printf("‚û°Ô∏è –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ %.2f ‚ÇΩ –æ—Ç %s –∫ %s%n", amount, fullName, other.fullName);
    }

    // –û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ (—Å —Ä–∞—Å—á—ë—Ç–æ–º –∫–µ—à–±—ç–∫–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞)
    public void payForService(BigDecimal amount) {
        if (amount.compareTo(BigDecimal.ZERO) <= 0)
            throw new IllegalArgumentException("–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!");
        if (balance.compareTo(amount) < 0)
            throw new IllegalArgumentException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã!");

        // –í—ã—á–∏—Å–ª—è–µ–º –∫–µ—à–±—ç–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞
        BigDecimal cashback = calculateCashback(amount);

        balance = balance.subtract(amount).add(cashback);

        System.out.printf("üßæ %s –æ–ø–ª–∞—Ç–∏–ª —É—Å–ª—É–≥—É –Ω–∞ %.2f ‚ÇΩ, –∫–µ—à–±—ç–∫: %.2f ‚ÇΩ%n",
                fullName, amount, cashback);

        // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
        if (!bonusGiven) {
            giveWelcomeBonus();
        }
    }

    private void giveWelcomeBonus() {
        balance = balance.add(BigDecimal.valueOf(1000));
        bonusGiven = true;
        System.out.printf("üéÅ %s –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å 1000 ‚ÇΩ!%n", fullName);
    }

    // –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
    protected abstract BigDecimal calculateCashback(BigDecimal amount);
    public abstract void monthlyFee();

    @Override
    public String toString() {
        return String.format("%s (%s) ‚Äî –±–∞–ª–∞–Ω—Å: %.2f ‚ÇΩ", fullName, getClass().getSimpleName(), balance);
    }
}
